import streamlit as st
from dotenv import load_dotenv
import os # Importamos a biblioteca OS para acessar as vari√°veis de ambiente

from langchain_openai import ChatOpenAI  # <-- ESTA √â A LINHA QUE PRECISA ESTAR AQUI
from langchain_community.tools.tavily_search import TavilySearchResults
from langchain.agents import AgentExecutor, create_openai_tools_agent
from langchain_core.prompts import ChatPromptTemplate

# -- Configura√ß√£o da P√°gina e Carregamento de Vari√°veis de Ambiente --

# Esta fun√ß√£o ainda √© importante! Ela l√™ o .env e o torna acess√≠vel para o os.getenv()
load_dotenv()

st.set_page_config(page_title="Alerta Asteroide IA", page_icon="‚òÑÔ∏è")
st.title("‚òÑÔ∏è Alerta Asteroide IA")
st.markdown("Este agente √© especializado em monitorar e pesquisar informa√ß√µes sobre Asteroides Potencialmente Perigosos (PHAs) que possam representar um risco para a Terra.")


# -- MUDAN√áA PRINCIPAL: Carregamento expl√≠cito das chaves --

# 1. Carregamos as chaves do ambiente para vari√°veis Python.
openai_api_key = os.getenv("OPENAI_API_KEY")
tavily_api_key = os.getenv("TAVILY_API_KEY")

# 2. Criamos uma verifica√ß√£o. Se a chave n√£o for encontrada, o programa para com uma mensagem clara.
#    Isso √© MUITO melhor para depurar do que o erro gen√©rico.
if not openai_api_key:
    st.error("ERRO: Chave da OpenAI (OPENAI_API_KEY) n√£o encontrada no seu arquivo .env.")
    st.error("Por favor, verifique seu arquivo .env e reinicie a aplica√ß√£o.")
    st.stop() # Para a execu√ß√£o do app se as chaves n√£o existirem.

if not tavily_api_key:
    st.error("ERRO: Chave da Tavily (TAVILY_API_KEY) n√£o encontrada no seu arquivo .env.")
    st.error("Por favor, verifique seu arquivo .env e reinicie a aplica√ß√£o.")
    st.stop() # Para a execu√ß√£o do app se as chaves n√£o existirem.


# -- Inicializa√ß√£o do Modelo e Ferramentas com as chaves expl√≠citas --

try:
    # 3. Passamos a chave diretamente para o construtor do ChatOpenAI
    llm = ChatOpenAI(
        model_name="gpt-4o",
        temperature=0.5,
        api_key=openai_api_key # MUDAN√áA AQUI
    )

    # 4. Passamos a chave diretamente para a ferramenta da Tavily
    tools = [
        TavilySearchResults(
            max_results=5,
            description="Uma ferramenta de busca na web para encontrar as informa√ß√µes mais atuais sobre astronomia, asteroides, NEOs e PHAs.",
            api_key=tavily_api_key # MUDAN√áA AQUI
        )
    ]

    # -- Cria√ß√£o do Prompt do Agente (sem mudan√ßas aqui) --
    prompt = ChatPromptTemplate.from_messages([
        ("system", """
        Voc√™ √© um analista de dados astron√¥micos especializado em Objetos Pr√≥ximos da Terra (NEOs) e Asteroides Potencialmente Perigosos (PHAs). Sua miss√£o √© usar a ferramenta de busca para encontrar as informa√ß√µes mais recentes e confi√°veis sobre asteroides que possam representar um risco de colis√£o com a Terra.
        O seu relat√≥rio final DEVE tentar incluir os seguintes pontos, se a informa√ß√£o estiver dispon√≠vel:
        - **Nome do Asteroide:**
        - **Data da Descoberta:**
        - **Di√¢metro Estimado:** (em metros ou quil√¥metros)
        - **Dist√¢ncia M√≠nima de Passagem da √ìrbita (MOID):** (em unidades astron√¥micas ou quil√¥metros)
        - **Probabilidade de Impacto:** (Mencione a Escala de Palermo ou Torino, se aplic√°vel)
        - **Data da Pr√≥xima Passagem Pr√≥xima:**
        - **Resumo do Risco Atual:** (Explique de forma clara se h√° algum risco real segundo as ag√™ncias espaciais).
        Termine SEMPRE seu relat√≥rio com a seguinte nota de rodap√©:
        ---
        *Fonte: Informa√ß√µes compiladas a partir de dados p√∫blicos na web. Para dados oficiais e em tempo real, consulte o site da NASA (JPL CNEOS) ou da ESA.*
        """),
        ("human", "{input}"),
        ("placeholder", "{agent_scratchpad}"),
    ])

    # -- Constru√ß√£o e Execu√ß√£o do Agente --
    agent = create_openai_tools_agent(llm, tools, prompt)
    agent_executor = AgentExecutor(agent=agent, tools=tools, verbose=True)

    # -- Interface do Usu√°rio com Streamlit --
    user_input = st.text_input("Digite o nome de um asteroide (ex: Apophis, Bennu) ou pe√ßa um relat√≥rio geral:")

    if user_input:
        with st.spinner("O Agente est√° escaneando os c√©us em busca de informa√ß√µes... üî≠"):
            response = agent_executor.invoke({"input": user_input})
            st.subheader("Relat√≥rio de An√°lise de Risco:")
            st.markdown(response["output"])

except Exception as e:
    st.error(f"Ocorreu um erro durante a execu√ß√£o do agente: {e}")